:mod:`distancematrix.generator`
===============================

.. py:module:: distancematrix.generator


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   abstract_generator/index.rst
   euclidean/index.rst
   filter_generator/index.rst
   znorm_euclidean/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   distancematrix.generator.Euclidean
   distancematrix.generator.ZNormEuclidean
   distancematrix.generator.FilterGenerator



.. py:class:: Euclidean(rb_scale_factor=2.0)

   Bases: :class:`distancematrix.generator.abstract_generator.AbstractGenerator`

   Class capable of efficiently calculating parts of the euclidean distance matrix between two series,
   where each entry in the distance matrix equals the euclidean distance between 2 subsequences of both series.

   This generator can handle streaming data.

   .. method:: prepare_streaming(self, m, series_window, query_window=None)

      Create a bound generator that supports streaming data.
      The generator will need to receive data before any distances can be calculated.

      :param m: the size of the subsequences used to calculate distances between series and query
      :param series_window: number of values to keep in memory for series, the length of the
        horizontal axis of the distance matrix will be equal to (series_window - m + 1)
      :param query_window: number of values to keep in memory for query, the length of the
        vertical axis of the distance matrix will be equal to (query_window - m + 1),
        or None to indicate a self-join.
      :return: a bound generator that supports streaming


   .. method:: prepare(self, m, series, query=None)

      Create a bound non-streaming generator for the given series and query sequences.

      :param m: the size of the subsequences used to calculate distances between series and query
      :param series: 1D array, used as the horizontal axis of a distance matrix
      :param query: 1D array, used as the vertical axis of a distance matrix, or None to indicate a self-join
      :return: a bound generator



.. py:class:: ZNormEuclidean(noise_std=0.0, rb_scale_factor=2.0)

   Bases: :class:`distancematrix.generator.abstract_generator.AbstractGenerator`

   Class capable of efficiently calculating parts of the z-normalized distance matrix between two series,
   where each entry in the distance matrix equals the euclidean distance between 2 z-normalized
   (zero mean and unit variance) subsequences of both series.

   This generator can handle streaming data.

   Subsequences with standard deviation <= 1e-6 will be treated as flat sequences to avoid problems
   with numerical stability.

   .. method:: prepare_streaming(self, m, series_window, query_window=None)

      Create a bound generator that supports streaming data.
      The generator will need to receive data before any distances can be calculated.

      :param m: the size of the subsequences used to calculate distances between series and query
      :param series_window: number of values to keep in memory for series, the length of the
        horizontal axis of the distance matrix will be equal to (series_window - m + 1)
      :param query_window: number of values to keep in memory for query, the length of the
        vertical axis of the distance matrix will be equal to (query_window - m + 1),
        or None to indicate a self-join.
      :return: a bound generator that supports streaming


   .. method:: prepare(self, m, series, query=None)

      Create a bound non-streaming generator for the given series and query sequences.

      :param m: the size of the subsequences used to calculate distances between series and query
      :param series: 1D array, used as the horizontal axis of a distance matrix
      :param query: 1D array, used as the vertical axis of a distance matrix, or None to indicate a self-join
      :return: a bound generator



.. py:class:: FilterGenerator(generator, invalid_data_function=is_not_finite, rb_scale_factor=2.0)

   Bases: :class:`distancematrix.generator.abstract_generator.AbstractGenerator`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. method:: prepare_streaming(self, m, series_window, query_window=None)

      Create a bound generator that supports streaming data.
      The generator will need to receive data before any distances can be calculated.

      :param m: the size of the subsequences used to calculate distances between series and query
      :param series_window: number of values to keep in memory for series, the length of the
        horizontal axis of the distance matrix will be equal to (series_window - m + 1)
      :param query_window: number of values to keep in memory for query, the length of the
        vertical axis of the distance matrix will be equal to (query_window - m + 1),
        or None to indicate a self-join.
      :return: a bound generator that supports streaming


   .. method:: prepare(self, m, series, query=None)

      Create a bound non-streaming generator for the given series and query sequences.

      :param m: the size of the subsequences used to calculate distances between series and query
      :param series: 1D array, used as the horizontal axis of a distance matrix
      :param query: 1D array, used as the vertical axis of a distance matrix, or None to indicate a self-join
      :return: a bound generator



